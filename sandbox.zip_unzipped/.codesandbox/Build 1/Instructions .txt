The provided file contains a Python script for a simple banking system. The script includes classes for `Bank`, `Admin`, and `Account`, and a command-line interface for managing accounts and performing banking operations.

To convert this script into a web application, we can use a Python web framework like Flask. Below, I'll outline the steps to create this web application and provide the essential code.

### Step-by-Step Guide

1. **Set Up Your Environment**:
   - Ensure you have Python installed.
   - Install Flask:
     ```bash
     pip install Flask
     ```

2. **Project Structure**:
   - Create a project directory and set up the following structure:
     ```
     banking_app/
     ├── app.py
     ├── templates/
     │   ├── index.html
     │   ├── admin.html
     │   ├── user.html
     ├── static/
     │   ├── styles.css
     ├── models.py
     └── requirements.txt
     ```

3. **Migrate Classes to a Separate Module**:
   - Move the `Bank`, `Admin`, and `Account` classes into a `models.py` file.

     ```python
     # models.py
     import random

     class Account:
         def __init__(self, account_number, name, email, address, account_type):
             self.name = name
             self.email = email
             self.address = address
             self.account_type = account_type
             self.account_number = account_number
             self.balance = 0
             self.transactions = []
             self.loan_amount = 0
             self.loan_taken = 0

         def deposit(self, amount):
             self.balance += amount
             self.transactions.append(f"Deposited: {amount}")
             return f"{amount} deposited successfully."

         def withdraw(self, amount):
             if amount > self.balance:
                 return "Withdrawal amount exceeded."
             else:
                 self.balance -= amount
                 self.transactions.append(f"Withdrawn: {amount}")
                 return f"{amount} withdrawn successfully."

         def check_balance(self):
             return f"Current Balance: {self.balance}"

         def transaction_history(self):
             return self.transactions

         def take_loan(self, amount):
             if self.loan_taken < 2:
                 self.loan_amount += amount
                 self.balance += amount
                 self.loan_taken += 1
                 self.transactions.append(f"Loan Taken: {amount}")
                 return "Loan taken successfully."
             else:
                 return "You have already taken the maximum number of loans."

         def transfer(self, amount, recipient):
             if amount > self.balance:
                 return "Insufficient balance."
             self.balance -= amount
             recipient.balance += amount
             self.transactions.append(f"Transferred: {amount} to {recipient.name}")
             recipient.transactions.append(f"Received: {amount} from {self.name}")
             return "Amount transferred successfully."

         def __str__(self):
             return f"Name: {self.name}, Email: {self.email}, Address: {self.address}, Account Type: {self.account_type}, Account Number: {self.account_number}, Balance: {self.balance}"

     class Admin:
         def create_account(self, bank, name, email, address, account_type):
             return bank.create_account(name, email, address, account_type)

         def delete_account(self, bank, account_number):
             bank.delete_account(account_number)

         def get_all_accounts(self, bank):
             return bank.get_all_accounts()

         def get_total_balance(self, bank):
             return bank.total_available_balance()

         def get_total_loan_amount(self, bank):
             return bank.total_loan_amount()

     class Bank:
         def __init__(self, name):
             self.name = name
             self.users = []
             self.admin = Admin()
             self.loan_feature = True

         def create_account(self, name, email, address, account_type):
             account_number = random.randint(1000, 10000)
             account = Account(account_number, name, email, address, account_type)
             self.users.append(account)
             return account

         def delete_account(self, account_number):
             for user in self.users:
                 if user.account_number == account_number:
                     self.users.remove(user)
                     return f"{account_number} deleted successfully."
             return f"{account_number} not found."

         def get_all_accounts(self):
             return [str(user) for user in self.users]

         def total_available_balance(self):
             total_balance = sum(user.balance for user in self.users)
             return f"Total balance: {total_balance}"

         def total_loan_amount(self):
             total_loan = sum(user.loan_amount for user in self.users)
             return f"Total loan: {total_loan}"

         def on_loan_feature(self):
             self.loan_feature = True
             return "Loan Feature is now Enabled"

         def off_loan_feature(self):
             self.loan_feature = False
             return "Loan feature is now Disabled"
     ```

4. **Create the Flask App**:
   - Create `app.py` and set up Flask routes for the admin and user functionalities.

     ```python
     # app.py
     from flask import Flask, render_template, request, redirect, url_for
     from models import Bank, Admin, Account

     app = Flask(__name__)

     bank = Bank("Example Bank")
     admin = Admin()
     current_user = None

     @app.route('/')
     def index():
         return render_template('index.html')

     @app.route('/admin', methods=['GET', 'POST'])
     def admin_panel():
         if request.method == 'POST':
             action = request.form.get('action')
             if action == 'create_account':
                 name = request.form.get('name')
                 email = request.form.get('email')
                 address = request.form.get('address')
                 account_type = request.form.get('account_type')
                 admin.create_account(bank, name, email, address, account_type)
             elif action == 'delete_account':
                 account_number = int(request.form.get('account_number'))
                 admin.delete_account(bank, account_number)
             elif action == 'get_all_accounts':
                 accounts = admin.get_all_accounts(bank)
                 return render_template('admin.html', accounts=accounts)
             elif action == 'get_total_balance':
                 total_balance = admin.get_total_balance(bank)
                 return render_template('admin.html', total_balance=total_balance)
             elif action == 'get_total_loan_amount':
                 total_loan_amount = admin.get_total_loan_amount(bank)
                 return render_template('admin.html', total_loan_amount=total_loan_amount)
             elif action == 'on_loan_feature':
                 bank.on_loan_feature()
             elif action == 'off_loan_feature':
                 bank.off_loan_feature()
         return render_template('admin.html')

     @app.route('/user', methods=['GET', 'POST'])
     def user_panel():
         global current_user
         if request.method == 'POST':
             action = request.form.get('action')
             if action == 'create_account':
                 name = request.form.get('name')
                 email = request.form.get('email')
                 address = request.form.get('address')
                 account_type = request.form.get('account_type')
                 current_user = bank.create_account(name, email, address, account_type)
             elif action == 'deposit':
                 amount = int(request.form.get('amount'))
                 message = current_user.deposit(amount)
                 return render_template('user.html', message=message)
             elif action == 'withdraw':
                 amount = int(request.form.get('amount'))
                 message = current_user.withdraw(amount)
                 return render_template('user.html', message=message)
             elif action == 'check_balance':
                 balance = current_user.check_balance()
                 return render_template('user.html', balance=balance)
             elif action == 'transaction_history':
                 history = current_user.transaction_history()
                 return render_template('user.html', history=history)
             elif action == 'take_loan':
                 amount = int(request.form.get('amount'))
                 message = current_user.take_loan(amount)
                 return render_template('user.html', message=message)
             elif action == 'transfer':
                 amount = int(request.form.get('amount'))
                 recipient_account_number = int(request.form.get('recipient_account_number'))
                 recipient = None
                 for user in bank.users:
                     if user.account_number == recipient_account_number:
                         recipient = user
                         break
                 if recipient:
                     message = current_user.transfer(amount, recipient)
                 else:
                     message = "Recipient not found."
                 return render_template('user.html', message=message)
         return render_template('user.html')

     if __name__ == '__main__':
         app.run(debug=True)
     ```

5. **Create HTML Templates**:
   - Create basic HTML templates for the index, admin, and user pages.

     ```html
     <!-- templates/index.html -->
     <!DOCTYPE html>
     <html>
     <head>
         <title>Banking System</title>
     </head>
     <body>
         <h1>Welcome to {{ bank_name }}</h1>
         <a href="{{ url_for('admin_panel') }}">Admin</a>
         <a href="{{ url_for('user_panel') }}">User</a>
     </body>
     </html>
     ```

     ```html
     <!-- templates/admin.html -->
     <!DOCTYPE html>
     <html>
     <head>
         <title>Admin Panel</title>
     </head>
     <body>
         <h1>Admin Panel</h1>
         <form method="POST">
             <h2>Create Account</h2>
             <input type="text" name="name" placeholder="Name" required>
             <input type="email" name="email" placeholder="Email" required>
             <