# models.py
import random


class Account:

    def __init__(self, account_number, name, email, address, account_type):

        self.name = name
        self.email = email
        self.address = address
        self.account_type = account_type
        self.account_number = account_number
        self.balance = 0
        self.transactions = []
        self.loan_amount = 0
        self.loan_taken = 0


def deposit(self, amount):
    self.balance += amount
    self.transactions.append(f"Deposited: {amount}")
    return f"{amount} deposited successfully."


def withdraw(self, amount):
    if amount > self.balance:
        return "Withdrawal amount exceeded."
    else:
        self.balance -= amount
        self.transactions.append(f"Withdrawn: {amount}")
        return f"{amount} withdrawn successfully."


def check_balance(self):
    return f"Current Balance: {self.balance}"


def transaction_history(self):
    return self.transactions


def take_loan(self, amount):
    if self.loan_taken < 2:
        self.loan_amount += amount
        self.balance += amount
        self.loan_taken += 1
        self.transactions.append(f"Loan Taken: {amount}")
        return "Loan taken successfully."
    else:
        return "You have already taken the maximum number of loans."


def transfer(self, amount, recipient):
    if amount > self.balance:
        return "Insufficient balance."
    self.balance -= amount
    recipient.balance += amount
    self.transactions.append(f"Transferred: {amount} to {recipient.name}")
    recipient.transactions.append(f"Received: {amount} from {self.name}")
    return "Amount transferred successfully."


def __str__(self):
    return f"Name: {self.name}, Email: {self.email}, Address: {self.address}, Account Type: {self.account_type}, Account Number: {self.account_number}, Balance: {self.balance}"


class Admin:


    def create_account(self, bank, name, email, address, account_type):
        return bank.create_account(name, email,                 address, account_type)


def delete_account(self, bank, account_number):
    bank.delete_account(account_number)


def get_all_accounts(self, bank):
    return bank.get_all_accounts()


def get_total_balance(self, bank):
    return bank.total_available_balance()


def get_total_loan_amount(self, bank):
    return bank.total_loan_amount()


class Bank:


def __init__(self, name):
    self.name = name
    self.users = []
    self.admin = Admin()
    self.loan_feature = True


def create_account(self, name, email, address, account_type):
    account_number = random.randint(1000, 10000)
    account = Account(account_number, name, email, address, account_type)
    self.users.append(account)
    return account


def delete_account(self, account_number):
    for user in self.users:
        if user.account_number == account_number:
            self.users.remove(user)
            return f"{account_number} deleted successfully."
    return f"{account_number} not found."


def get_all_accounts(self):
    return [str(user) for user in self.users]


def total_available_balance(self):
    total_balance = sum(user.balance for user in self.users)
    return f"Total balance: {total_balance}"


def total_loan_amount(self):
    total_loan = sum(user.loan_amount for user in self.users)
    return f"Total loan: {total_loan}"


def on_loan_feature(self):
    self.loan_feature = True
    return "Loan Feature is now Enabled"


def off_loan_feature(self):
    self.loan_feature = False
    return "Loan feature is now Disabled"
    return "Loan feature is now Disabled"
    return "Loan feature is now Disabled"